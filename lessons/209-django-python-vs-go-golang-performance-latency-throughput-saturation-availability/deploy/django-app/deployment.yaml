---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-app
  namespace: default
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: django-app
  template:
    metadata:
      labels:
        app: django-app
    spec:
      tolerations:
      - effect: NoSchedule
        operator: Exists
      nodeSelector:
        # node: node-00
        role: general
      initContainers:
      - name: migration
        image: aputra/mydjango-209:v5
        # run all migrations
        command: ['sh', '-c', "/app/manage.py migrate"]
        # run all specific migration
        # command: ['sh', '-c', "/app/manage.py migrate api 0001"]
        volumeMounts:
        - name: config
          mountPath: /app/pg_service.conf
          subPath: pg_service.conf
        env:
        - name: PGSERVICEFILE
          value: /app/pg_service.conf
        - name: PGPASSWORD
          value: devops123
      containers:
      - name: django-app
        image: aputra/mydjango-209:v5
        env:
        - name: AWS_ACCESS_KEY_ID
          value: admin
        - name: AWS_SECRET_ACCESS_KEY
          value: 867tfc1823fgujhwadf1231
        - name: PGSERVICEFILE
          value: /app/pg_service.conf
        - name: PGPASSWORD
          value: devops123
        ports:
        - name: http
          containerPort: 8080
        resources:
          requests:
            memory: 6Gi
            cpu: "2"
          limits:
            memory: 6Gi
            cpu: "2"
        # readinessProbe:
        #   httpGet:
        #     path: /healthz
        #     port: http
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   failureThreshold: 2
        # livenessProbe:
        #   httpGet:
        #     path: /healthz
        #     port: http
        #   periodSeconds: 10
        #   timeoutSeconds: 5
        #   failureThreshold: 2
        volumeMounts:
        - name: config
          mountPath: /app/mydjango/settings.py
          subPath: settings.py
        - name: config
          mountPath: /app/pg_service.conf
          subPath: pg_service.conf
        - name: my-volume
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: django-app
      - name: my-volume
        hostPath:
          path: /tmp
          type: DirectoryOrCreate
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - django-app
                - go-app
            topologyKey: "kubernetes.io/hostname"
