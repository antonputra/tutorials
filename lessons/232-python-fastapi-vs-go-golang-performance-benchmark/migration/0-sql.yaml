---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sql
  namespace: default
data:
  init.sql: |
    --
    -- Create application users.
    --
    CREATE USER go_app WITH PASSWORD 'devops123' SUPERUSER CREATEDB CREATEROLE LOGIN;
    CREATE USER node_app WITH PASSWORD 'devops123' SUPERUSER CREATEDB CREATEROLE LOGIN;
    CREATE USER python_app WITH PASSWORD 'devops123' SUPERUSER CREATEDB CREATEROLE LOGIN;

    --
    -- Clean up idle connections.
    --
    WITH inactive_connections AS (SELECT pid, usename FROM pg_stat_activity WHERE usename = 'go_app') SELECT pg_terminate_backend(pid) FROM inactive_connections;
    WITH inactive_connections AS (SELECT pid, usename FROM pg_stat_activity WHERE usename = 'node_app') SELECT pg_terminate_backend(pid) FROM inactive_connections;
    WITH inactive_connections AS (SELECT pid, usename FROM pg_stat_activity WHERE usename = 'python_app') SELECT pg_terminate_backend(pid) FROM inactive_connections;

    BEGIN;

    --
    -- Drop tables.
    --
    DROP TABLE IF EXISTS go_device;
    DROP TABLE IF EXISTS node_device;
    DROP TABLE IF EXISTS python_device;

    --
    -- Create device tables.
    --
    CREATE TABLE IF NOT EXISTS go_device (id SERIAL PRIMARY KEY, uuid UUID DEFAULT NULL, mac VARCHAR(255) DEFAULT NULL, firmware VARCHAR(255) DEFAULT NULL, created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP);
    CREATE TABLE IF NOT EXISTS node_device (id SERIAL PRIMARY KEY, uuid UUID DEFAULT NULL, mac VARCHAR(255) DEFAULT NULL, firmware VARCHAR(255) DEFAULT NULL, created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP);
    CREATE TABLE IF NOT EXISTS python_device (id SERIAL PRIMARY KEY, uuid UUID DEFAULT NULL, mac VARCHAR(255) DEFAULT NULL, firmware VARCHAR(255) DEFAULT NULL, created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP);

    --
    -- Create indexes.
    --
    CREATE INDEX IF NOT EXISTS idx_python_device_uuid ON python_device (uuid);
    CREATE INDEX IF NOT EXISTS idx_node_device_uuid ON node_device (uuid);
    CREATE INDEX IF NOT EXISTS idx_go_device_uuid ON go_device (uuid);

    COMMIT;

    --
    -- Garbage-collect (reclaims storage occupied by dead tuples)
    --
    VACUUM full;
